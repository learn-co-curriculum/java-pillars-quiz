{
  "quiz": {
    "id": 45551,
    "title": "Quiz 1 - OOP Foundations",
    "html_url": "https://learning.flatironschool.com/courses/6677/quizzes/45551",
    "mobile_url": "https://learning.flatironschool.com/courses/6677/quizzes/45551?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"java-pillars-quiz\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/java-pillars-quiz/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge!\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 10,
    "points_possible": 10.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_45551"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": null,
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/6677/quizzes/45551/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/6677/quizzes/45551/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/6677/quizzes/45551/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/6677/quizzes/45551/submission_versions",
    "assignment_id": 234392,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 20002,
    "show_correct_answers_last_attempt": true,
    "version_number": 5,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": null,
    "in_paced_course": false,
    "question_types": [

    ]
  },
  "questions": [
    {
      "id": 310322,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540644,
      "position": null,
      "question_name": "Terminology",
      "question_type": "matching_question",
      "question_text": "<p>Match the term with the correct description.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": "7773",
          "text": "Abstraction",
          "left": "Abstraction",
          "right": "A programming mechanism that lets us focus on essential functionality and hide the implementation details.",
          "comments": "",
          "comments_html": "",
          "match_id": 3129
        },
        {
          "id": "760",
          "text": "Encapsulation",
          "left": "Encapsulation",
          "right": "A programming mechanism that wraps up data in a single unit and keeps it safe from outside interference.",
          "comments": "",
          "comments_html": "",
          "match_id": 2746
        },
        {
          "id": "9699",
          "text": "Inheritance",
          "left": "Inheritance",
          "right": "A mechanism in which one class is allowed to derive the features (attributes and methods) of another class.",
          "comments": "",
          "comments_html": "",
          "match_id": 5577
        },
        {
          "id": "9068",
          "text": "Polymorphism",
          "left": "Polymorphism",
          "right": "It is the ability for an object or method to take on many forms.",
          "comments": "",
          "comments_html": "",
          "match_id": 2992
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": [
        {
          "text": "A programming mechanism that lets us focus on essential functionality and hide the implementation details.",
          "match_id": 3129
        },
        {
          "text": "A programming mechanism that wraps up data in a single unit and keeps it safe from outside interference.",
          "match_id": 2746
        },
        {
          "text": "A mechanism in which one class is allowed to derive the features (attributes and methods) of another class.",
          "match_id": 5577
        },
        {
          "text": "It is the ability for an object or method to take on many forms.",
          "match_id": 2992
        },
        {
          "text": "I don't know.",
          "match_id": 3335
        }
      ],
      "matching_answer_incorrect_matches": "I don't know."
    },
    {
      "id": 310323,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540645,
      "position": null,
      "question_name": "Inheritance",
      "question_type": "multiple_choice_question",
      "question_text": "<p>How many fields does each <code>Car</code> object have?</p>\n<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">make</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">model</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 6654,
          "text": "",
          "html": "<p>3</p>",
          "comments": "",
          "comments_html": "<p>Correct! Each instance of <code>Car</code> has three fields: <code>id</code>, <code>make</code>, and <code>model</code>.\nThe <code>id</code> field is inherited from <code>Vehicle, and</code>Car<code>\ndefines two additional fields</code>make<code>and</code>model`.</p>",
          "weight": 100.0
        },
        {
          "id": 3572,
          "text": "",
          "html": "<p>1</p>",
          "comments": "",
          "comments_html": "<p>Incorrect. Each instance of <code>Car</code> has three fields: <code>id</code>, <code>make</code>, and <code>model</code>.\nThe <code>id</code> field is inherited from <code>Vehicle, and</code>Car<code>\ndefines two additional fields</code>make<code>and</code>model`.</p>",
          "weight": 0.0
        },
        {
          "id": 707,
          "text": "",
          "html": "<p>2</p>",
          "comments": "",
          "comments_html": "<p>Incorrect. Each instance of <code>Car</code> has three fields: <code>id</code>, <code>make</code>, and <code>model</code>.\nThe <code>id</code> field is inherited from <code>Vehicle, and</code>Car<code>\ndefines two additional fields</code>make<code>and</code>model`.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310324,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540646,
      "position": null,
      "question_name": "Inheritance",
      "question_type": "multiple_choice_question",
      "question_text": "<p>What is printed when the <code>main</code> method executes?</p>\n<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span>  <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"honk\"</span><span class=\"o\">);</span> <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"vroom\"</span><span class=\"o\">);</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Truck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"beep\"</span><span class=\"o\">);}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Truck</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Truck</span><span class=\"o\">();</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">horn</span><span class=\"o\">();</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">drive</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 6285,
          "text": "",
          "html": "<p>beep<br>\nvroom</p>",
          "comments": "",
          "comments_html": "<p>Correct!  The <code>Truck</code> class inherits method <code>drive()</code> from the <code>Vehicle</code> class\nand overrides the <code>horn()</code> method.</p>",
          "weight": 100.0
        },
        {
          "id": 9846,
          "text": "",
          "html": "<p>honk<br>\nvroom</p>",
          "comments": "",
          "comments_html": "<p>Incorrect.  The <code>Truck</code> class inherits method <code>drive()</code> from the <code>Vehicle</code> class\nand overrides the <code>horn()</code> method. The correct output is:<br>\nbeep<br>\nvroom</p>",
          "weight": 0.0
        },
        {
          "id": 9652,
          "text": "",
          "html": "<p>The code won't compile because Truck does not define a method named drive.</p>",
          "comments": "",
          "comments_html": "<p>Incorrect.  The <code>Truck</code> class inherits method <code>drive()</code> from the <code>Vehicle</code> class\nand overrides the <code>horn()</code> method. The correct output is:<br>\nbeep<br>\nvroom</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310325,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540647,
      "position": null,
      "question_name": "Polymorphic References",
      "question_type": "multiple_answers_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span>  <span class=\"o\">{</span> <span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Truck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Select each assignment statement that compiles without an error.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 5690,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! </p>",
          "weight": 100.0,
          "html": "<p><code>Vehicle v1 = new Vehicle();</code></p>"
        },
        {
          "id": 9770,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! </p>",
          "weight": 100.0,
          "html": "<p><code>Truck t1 = new Truck();</code></p>"
        },
        {
          "id": 7013,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! <code>Truck</code> is a subclass of <code>Vehicle</code>.  A variable declared with the superclass type\ncan be assigned to an object of the subclass type.</p>",
          "weight": 100.0,
          "html": "<p><code>Vehicle v2 = new Truck();</code></p>"
        },
        {
          "id": 560,
          "text": "",
          "comments": "",
          "comments_html": "<p>Incorrect. <code>Vehicle</code> is a superclass of <code>Truck</code>.  A variable declared with the subclass type\ncan't be assigned to an object of the superclass type.</p>",
          "weight": 0.0,
          "html": "<p><code>Truck t2 = new Vehicle();</code></p>"
        },
        {
          "id": 8761,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! Every class is a subclass of <code>Object</code>.  A variable declared with the superclass type\ncan be assigned to an object of the subclass type.</p>",
          "weight": 100.0,
          "html": "<p><code>Object o = new Vehicle();</code></p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310326,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540648,
      "position": null,
      "question_name": "Abstraction",
      "question_type": "multiple_answers_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span>  <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"beep\"</span><span class=\"o\">);}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">Drivable</span> <span class=\"o\">{</span>\n  <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Truck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"kd\">implements</span> <span class=\"nc\">Drivable</span> <span class=\"o\">{</span>\n  <span class=\"nd\">@Override</span>\n  <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"vroom\"</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Select each assignment statement that compiles without an error.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 8735,
          "text": "",
          "comments": "",
          "comments_html": "<p>Incorrect.  <code>Vehicle</code> is an abstract class that can't be instantiated.</p>",
          "weight": 100.0,
          "html": "<p><code>Vehicle v1 = new Vehicle();</code></p>"
        },
        {
          "id": 7740,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct!</p>",
          "weight": 100.0,
          "html": "<p><code>Truck t1 = new Truck();</code></p>"
        },
        {
          "id": 2448,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! <code>Truck</code> is a subclass of <code>Vehicle</code>.  A variable declared with the superclass type\ncan be assigned to an object of the subclass type.</p>",
          "weight": 100.0,
          "html": "<p><code>Vehicle v2 = new Truck();</code></p>"
        },
        {
          "id": 9744,
          "text": "",
          "comments": "",
          "comments_html": "<p>Incorrect.  <code>Drivable</code> is an interface and can't be instantiated.</p>",
          "weight": 0.0,
          "html": "<p><code>Drivable d1 = new Drivable();</code></p>"
        },
        {
          "id": 3521,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! <code>Truck</code> implements the <code>Drivable</code> interface.  A variable declared with the interface type\ncan be assigned to an object of a class that implements the interface.</p>",
          "weight": 100.0,
          "html": "<p><code>Drivable d2 = new Truck();</code></p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310327,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540649,
      "position": null,
      "question_name": "Polymorphism",
      "question_type": "multiple_choice_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span>  <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"honk\"</span><span class=\"o\">);</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Truck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"beep\"</span><span class=\"o\">);}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Vehicle</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Truck</span><span class=\"o\">();</span>\n        <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"na\">horn</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>What is printed when the <code>main</code> method executes?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 4541,
          "text": "",
          "html": "<p>honk</p>",
          "comments": "",
          "comments_html": "<p>Incorrect.  The variable <code>v</code> references an instance of class <code>Truck</code>.\nDue to dynamic binding, Java executes the method based on the type\nof the object <code>Truck</code>, not the declared type of the variable <code>Vehicle</code>.\nThe correct output is:<br>\nbeep</p>",
          "weight": 0.0
        },
        {
          "id": 4648,
          "text": "",
          "html": "<p>beep</p>",
          "comments": "",
          "comments_html": "<p>Correct!  The variable <code>v</code> references an instance of class <code>Truck</code>.\nDue to dynamic binding, Java executes the method based on the type\nof the object <code>Truck</code>, not the declared type of the variable <code>Vehicle</code>.</p>",
          "weight": 100.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310328,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540650,
      "position": null,
      "question_name": "Overriding",
      "question_type": "true_false_question",
      "question_text": "<p>A subclass method overrides a superclass method if it has the same signature.\nThe <code>@Override</code> annotation is optional.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Correct.  The <code>@Override</code> is recommended but optional.  A subclass method overrides a\nsuperclass method if it has the same signature.  The <code>@Override</code> annotation tells the compiler\nto check and make sure the subclass method is actually overriding an inherited method.</p>",
          "text": "True",
          "weight": 100,
          "id": 5105
        },
        {
          "comments": "",
          "comments_html": "<p>Incorrect.  The <code>@Override</code> is recommended but optional.  A subclass method overrides a\nsuperclass method if it has the same signature. The <code>@Override</code> annotation tells the compiler\nto check and make sure the subclass method is actually overriding an inherited method.</p>",
          "text": "False",
          "weight": 0,
          "id": 5872
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310336,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540651,
      "position": null,
      "question_name": "Super",
      "question_type": "multiple_choice_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span>  <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"toot\"</span><span class=\"o\">);</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Truck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"beep\"</span><span class=\"o\">);}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FastTruck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Truck</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">horn</span><span class=\"o\">();</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"honk\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">FastTruck</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FastTruck</span><span class=\"o\">();</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">horn</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>What is printed when the <code>main</code> method executes?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 1594,
          "text": "",
          "html": "<p>toot<br>\nhonk</p>",
          "comments": "",
          "comments_html": "<p>Incorrect.  The call <code>super.horn()</code> invokes\nthe method inherited from the <code>Truck</code> superclass.\nThe correct output is:<br>\nbeep<br>\nhonk</p>",
          "weight": 0.0
        },
        {
          "id": 9071,
          "text": "",
          "html": "<p>beep<br>\nhonk</p>",
          "comments": "",
          "comments_html": "<p>Correct.  The call <code>super.horn()</code> invokes\nthe method inherited from the <code>Truck</code> superclass.</p>",
          "weight": 100.0
        },
        {
          "id": 1519,
          "text": "",
          "html": "<p>honk</p>",
          "comments": "",
          "comments_html": "<p>Incorrect.  The call <code>super.horn()</code> invokes\nthe method inherited from the <code>Truck</code> superclass.\nThe correct output is:<br>\nbeep<br>\nhonk</p>",
          "weight": 0.0
        },
        {
          "id": 7513,
          "text": "",
          "html": "<p>beep</p>",
          "comments": "",
          "comments_html": "<p>Incorrect.  The call<code>t.horn()</code> calls the method in the <code>FastTruck</code> class.\nThe call <code>super.horn()</code> invokes the method inherited from the <code>Truck</code> superclass.\nThe correct output is:<br>\nbeep<br>\nhonk</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310337,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540652,
      "position": null,
      "question_name": "Super",
      "question_type": "multiple_choice_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Vehicle</span>  <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"toot\"</span><span class=\"o\">);</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Truck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Vehicle</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">v8Engine</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FastTruck</span> <span class=\"kd\">extends</span> <span class=\"nc\">Truck</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">horn</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">horn</span><span class=\"o\">();</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"honk\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">FastTruck</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">FastTruck</span><span class=\"o\">();</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">horn</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>What is printed when the <code>main</code> method executes?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 1088,
          "text": "",
          "html": "<p><code>Truck</code> does not override the <code>honk()</code>\nmethod so the code won't compile due to the call <code>super.honk();</code></p>",
          "comments": "",
          "comments_html": "<p>Incorrect. \nSince <code>Truck</code> does not override the <code>honk()</code> method, <code>Truck</code>\ninherits the method from its superclass <code>Vehicle</code>.  The call\n<code>super.honk();</code> will invoke the method inherited from the <code>Vehicle</code> superclass.\nThe correct output is:<br>\ntoot<br>\nhonk</p>",
          "weight": 0.0
        },
        {
          "id": 784,
          "text": "",
          "html": "<p>toot&lt;br&gt;\nhonk</p>",
          "comments": "",
          "comments_html": "<p>Correct.\nSince <code>Truck</code> does not override the <code>honk()</code> method, <code>Truck</code>\ninherits the method from its superclass <code>Vehicle</code>.  The call\n<code>super.honk();</code> will invoke the method inherited from the <code>Vehicle</code> superclass.</p>",
          "weight": 100.0
        },
        {
          "id": 4653,
          "text": "",
          "html": "<p>honk</p>",
          "comments": "",
          "comments_html": "<p>Incorrect.\nSince <code>Truck</code> does not override the <code>honk()</code> method, <code>Truck</code>\ninherits the method from its superclass <code>Vehicle</code>.  The call\n<code>super.honk();</code> will invoke the method inherited from the <code>Vehicle</code> superclass.\nThe correct output is:<br>\ntoot<br>\nhonk</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 310338,
      "quiz_id": 45551,
      "quiz_group_id": null,
      "assessment_question_id": 540653,
      "position": null,
      "question_name": "Interface",
      "question_type": "multiple_choice_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">Drivable</span> <span class=\"o\">{</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">Washable</span> <span class=\"o\">{</span>\n    <span class=\"kt\">void</span> <span class=\"nf\">wash</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Which class definition will compile?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "",
      "answers": [
        {
          "id": 8699,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">extends</span> <span class=\"nc\">Drivable</span><span class=\"o\">,</span> <span class=\"nc\">Washable</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"VROOM\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">wash</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"I'm clean!\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Incorrect.  <code>Drivable</code> and <code>Washable</code> are interfaces.  The correct class header should be:&lt;br&gt;\n<code>public class Car implements Drivable, Washable {</code></p>",
          "weight": 0.0
        },
        {
          "id": 2477,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">extends</span> <span class=\"nc\">Drivable</span> <span class=\"kd\">implements</span> <span class=\"nc\">Washable</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"VROOM\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">wash</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"I'm clean!\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Incorrect.  <code>Drivable</code> and <code>Washable</code> are interfaces.  The correct class header should be:&lt;br&gt;\n<code>public class Car implements Drivable, Washable {</code></p>",
          "weight": 0.0
        },
        {
          "id": 7579,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">implements</span> <span class=\"nc\">Drivable</span><span class=\"o\">,</span> <span class=\"nc\">Washable</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"VROOM\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">wash</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"I'm clean!\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Correct.  <code>Drivable</code> and <code>Washable</code> are interfaces.  <code>Car</code> must override the abstract\nmethods defined in each interface.</p>",
          "weight": 100.0
        },
        {
          "id": 339,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">implements</span> <span class=\"nc\">Drivable</span> <span class=\"n\">and</span> <span class=\"nc\">Washable</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"VROOM\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">wash</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"I'm clean!\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Incorrect.  <code>Drivable</code> and <code>Washable</code> are interfaces.  The correct class header should be:&lt;br&gt;\n<code>public class Car implements Drivable, Washable {</code></p>",
          "weight": 0.0
        },
        {
          "id": 3324,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight java\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"kd\">implements</span> <span class=\"nc\">Drivable</span><span class=\"o\">,</span> <span class=\"nc\">Washable</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">drive</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">wash</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"I'm clean!\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Incorrect.  <code>Car</code> must override methods with signatures <code>public void drive()</code>\nand <code>public void wash()</code>.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}